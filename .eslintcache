[{"C:\\DEV-VSCODE\\desafio-onesight\\src\\routes.js":"1","C:\\DEV-VSCODE\\desafio-onesight\\src\\utils\\Utils.js":"2","C:\\DEV-VSCODE\\desafio-onesight\\src\\pages\\MealCategories.js":"3","C:\\DEV-VSCODE\\desafio-onesight\\src\\pages\\Login.js":"4","C:\\DEV-VSCODE\\desafio-onesight\\src\\pages\\MealsList.js":"5","C:\\DEV-VSCODE\\desafio-onesight\\src\\pages\\MealDetails.js":"6","C:\\DEV-VSCODE\\desafio-onesight\\src\\errors\\Error404.js":"7","C:\\DEV-VSCODE\\desafio-onesight\\src\\components\\Header.js":"8","C:\\DEV-VSCODE\\desafio-onesight\\src\\App.js":"9","C:\\DEV-VSCODE\\desafio-onesight\\src\\services\\api.js":"10","C:\\DEV-VSCODE\\desafio-onesight\\src\\utils\\tablesColumns.js":"11","C:\\DEV-VSCODE\\desafio-onesight\\src\\index.js":"12","C:\\DEV-VSCODE\\desafio-onesight\\src\\reducers\\tableModeReducer.js":"13","C:\\DEV-VSCODE\\desafio-onesight\\src\\reducers\\loginReducer.js":"14","C:\\DEV-VSCODE\\desafio-onesight\\src\\pages\\CreateAccount.js":"15","C:\\DEV-VSCODE\\desafio-onesight\\src\\components\\PrivateRoute.js":"16"},{"size":1015,"mtime":1606475916626,"results":"17","hashOfConfig":"18"},{"size":284,"mtime":1607288423465,"results":"19","hashOfConfig":"18"},{"size":12936,"mtime":1607469917374,"results":"20","hashOfConfig":"18"},{"size":7055,"mtime":1607472475886,"results":"21","hashOfConfig":"18"},{"size":10961,"mtime":1607473402460,"results":"22","hashOfConfig":"18"},{"size":8888,"mtime":1607712820668,"results":"23","hashOfConfig":"18"},{"size":325,"mtime":1607294871665,"results":"24","hashOfConfig":"18"},{"size":7340,"mtime":1607295276546,"results":"25","hashOfConfig":"18"},{"size":534,"mtime":1606484595935,"results":"26","hashOfConfig":"18"},{"size":123,"mtime":1606403100081,"results":"27","hashOfConfig":"18"},{"size":561,"mtime":1607469523473,"results":"28","hashOfConfig":"18"},{"size":219,"mtime":1606328717953,"results":"29","hashOfConfig":"18"},{"size":256,"mtime":1606484904186,"results":"30","hashOfConfig":"18"},{"size":248,"mtime":1606484905862,"results":"31","hashOfConfig":"18"},{"size":10481,"mtime":1606528682601,"results":"32","hashOfConfig":"18"},{"size":481,"mtime":1606402463763,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1vu372u",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\DEV-VSCODE\\desafio-onesight\\src\\routes.js",[],["71","72"],"C:\\DEV-VSCODE\\desafio-onesight\\src\\utils\\Utils.js",[],"C:\\DEV-VSCODE\\desafio-onesight\\src\\pages\\MealCategories.js",["73","74","75","76","77","78","79","80","81","82","83"],"import { useEffect, useMemo, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Header from \"../components/Header\";\r\nimport api from \"../services/api\";\r\nimport {urlTheMealDB} from \"../utils/Utils\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Button, Container, Modal, Paper, TableContainer } from \"@material-ui/core\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport MaUTable from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport transitions from \"@material-ui/core/styles/transitions\";\r\n\r\nimport { useTable } from \"react-table\";\r\nimport { TABLE_MEALS_CATEGORIES_COLUMNS } from \"../utils/tablesColumns\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport '../styles/tablesStyles.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // maxWidth: 345,\r\n    // marginBottom: 20\r\n  },\r\n  media: {\r\n    height: 200,\r\n    backgroundSize: \"contain\",\r\n  },\r\n  paper: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: '10px 0px 0px 0px',\r\n    marginBottom: '20px'\r\n  },\r\n  preloader: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    width: '100%',\r\n  },\r\n  center: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  container: {\r\n    marginTop: '15px',\r\n    marginBottom: '20px', \r\n  },\r\n  tableCategoryImage: {\r\n    borderRadius: '7px',\r\n  },\r\n  mainContent: {\r\n    display: 'box',\r\n    lineClamp: 3,\r\n    boxOrient: 'vertical',  \r\n    overflow: 'hidden',\r\n  },\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    overflow: 'auto',\r\n  },\r\n  modalStyle: {\r\n    position: 'absolute',\r\n    width: '70%',\r\n    maxWidth: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    outline: 'none',\r\n    borderRadius: '5px 5px 5px 5px',\r\n    fontFamily: 'Roboto, sans-serif',\r\n  },\r\n  modalImg: {\r\n    borderRadius: '7px',\r\n    marginTop: '14px',\r\n    width: '100%',\r\n  }\r\n}));\r\n\r\nexport default function MealCategories() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [modalContent, setModalContent] = useState('');\r\n  \r\n  const [allMealsCategories, setAllMealsCategories] = useState([]);\r\n  // const [tableMode, setTableMode] = useState(false);\r\n\r\n  const tableMode = useSelector((state) => {\r\n    return state.table_mode;\r\n  });\r\n\r\n  useEffect(() => {\r\n    const getMealCategories = async () => {\r\n      const data = await api.get(`${urlTheMealDB}/categories.php`)\r\n        .then((response) => {\r\n          return response.data;\r\n        });\r\n\r\n      const newData = data.categories.map(category => {\r\n        return {...category, 'categoryLink': `${category.strCategory}`};\r\n      })\r\n      setAllMealsCategories(newData);\r\n    };\r\n\r\n    getMealCategories();\r\n    console.log(allMealsCategories);\r\n  }, []);\r\n  \r\n  const handleModalOpen = (catName, catDescription, catThumb) => {\r\n    setModalContent(\r\n      <div className={classes.modalStyle}>\r\n        <img src={catThumb} alt={`${catName}`} className={classes.modalImg}/>\r\n        <h2 id=\"simple-modal-title\">{catName}</h2>\r\n        <p id=\"simple-modal-description\">\r\n          {catDescription}\r\n        </p>\r\n        <Button size=\"small\" variant=\"outlined\" onClick={handleModalClose}>close</Button>\r\n      </div>\r\n    );\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleModalClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  function Table() {\r\n    const columns = useMemo(() => TABLE_MEALS_CATEGORIES_COLUMNS, []);\r\n    const data = useMemo(() => allMealsCategories, []);\r\n\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      rows,\r\n      prepareRow,\r\n    } = useTable({\r\n      columns,\r\n      data,\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <table className=\"table\" {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody>\r\n          {\r\n            rows.map(row => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()} >\r\n                  {\r\n                    row.cells.map((cell, index) => {\r\n                      if (index === 0) {\r\n                        return (\r\n                          <td key={index} data-label=\"Image\">\r\n                            <img src={cell.row.cells[index].value} alt=\"Category\"  className=\"\" />\r\n                          </td>\r\n                        )\r\n                      } else if(index === 1) {\r\n                        return (\r\n                          <td key={index} data-label=\"Category\">\r\n                            {cell.row.cells[index].value}\r\n                          </td>);\r\n                      } else if(index === 2) {\r\n                        return (\r\n                          <td key={index} data-label=\"Info\">\r\n                            {cell.row.cells[index].value}\r\n                          </td>);\r\n                      } else if(index === 3) {\r\n                        return (\r\n                          <td key={index} data-label=\"Link\">\r\n                              <Button \r\n                              fullWidth\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              onClick={() => handleClickGoToCategoryMeals(cell.row.cells[index-2].value, cell.row.cells[index-2].value, cell.row.cells[index-3].value)\r\n                              }>See {cell.row.cells[index].value} meals</Button>\r\n                          </td>\r\n                        )\r\n                      }\r\n                    })\r\n                  }\r\n                </tr>\r\n              )\r\n            })\r\n          }\r\n          </tbody>\r\n        </table>\r\n\r\n        {/* <TableContainer component={Paper}>\r\n          <MaUTable {...getTableProps()}>\r\n            <TableHead>\r\n              {headerGroups.map(headerGroup => (\r\n                <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n                  {headerGroup.headers.map(column => (\r\n                    <TableCell {...column.getHeaderProps()}>{column.render('Header')}</TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n            </TableHead>\r\n            <TableBody {...getTableBodyProps()}>\r\n              {\r\n                rows.map(row => {\r\n                  prepareRow(row);\r\n                  console.log(row)\r\n                  return (\r\n                    <TableRow {...row.getRowProps()} >\r\n                      {\r\n                        row.cells.map((cell, index) => {\r\n                          if (index === 0) {\r\n                            return (\r\n                              <TableCell key={index}>\r\n                                <img src={cell.row.cells[index].value} alt=\"Category\" width=\"100px\" className={classes.tableCategoryImage} />\r\n                              </TableCell>\r\n                            )\r\n                          }else if(index === 3) {\r\n                            return (\r\n                              <TableCell key={index}>\r\n                                  <Button \r\n                                  fullWidth\r\n                                  variant=\"contained\"\r\n                                  color=\"primary\"\r\n                                  onClick={() => handleClickGoToCategoryMeals(cell.row.cells[index-2].value, cell.row.cells[index-2].value, cell.row.cells[index-3].value)\r\n                                  }>See {cell.row.cells[index].value} meals</Button>\r\n                              </TableCell>\r\n                            )\r\n                          } else {\r\n                            return (\r\n                              <TableCell key={index}>\r\n                                {cell.row.cells[index].value}\r\n                              </TableCell>);\r\n                          }\r\n                          // {return <td {...cell.getCellProps()}>\r\n                          //   {cell.render('Cell')}\r\n                          // </td>}\r\n                        })\r\n                      }\r\n                    </TableRow>\r\n                  )\r\n                })\r\n              }\r\n            </TableBody>\r\n          </MaUTable>\r\n        </TableContainer> */}\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n  function handleClickGoToCategoryMeals(idCategory, categoryDescription, categoryThumb) {\r\n    history.push({pathname: `/list/${idCategory}`, state: {description: categoryDescription, thumb: categoryThumb}});\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header></Header>\r\n      <Container maxWidth=\"lg\">\r\n\r\n        <Grid container spacing={3} className={classes.container}>\r\n          {allMealsCategories.length === 0 \r\n          ? <div className={classes.preloader}>\r\n              {/* <CircularProgress /> */}\r\n              <Card style={{width: '100%'}}>\r\n                <CardContent>\r\n                  <Skeleton animation=\"wave\" variant=\"rect\" width=\"100%\" height={200} />\r\n                  <Skeleton animation=\"wave\" variant=\"text\" height={40} />\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          : (\r\n            tableMode ? <Table />\r\n            : (\r\n              allMealsCategories.map((category) => {\r\n                return (\r\n                  <Grid item xs={12} sm={6} md={4} lg={3} direction='column' key={category.idCategory}>\r\n                    <Card>\r\n                      <CardActionArea\r\n                        onClick={() =>\r\n                          handleClickGoToCategoryMeals(category.strCategory, category.strCategoryDescription, category.strCategoryThumb)\r\n                        }\r\n                      >\r\n                        <CardMedia\r\n                          className={classes.media}\r\n                          image={category.strCategoryThumb}\r\n                          title={`${category.strCategory} category image`}\r\n                        />\r\n                        <CardContent>\r\n                          <Typography gutterBottom variant=\"h4\" component=\"h4\" className={classes.center}>\r\n                            {category.strCategory}\r\n                          </Typography>\r\n                          <Typography gutterBottom variant=\"body1\" component=\"body1\" className={[classes.center, classes.mainContent]} >\r\n                            {category.strCategoryDescription}\r\n                          </Typography>\r\n                        </CardContent>\r\n                      </CardActionArea>\r\n                      <CardActions>\r\n                        <Button\r\n                          size=\"small\"\r\n                          // color=\"primary\"\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          onClick={() => {handleModalOpen(category.strCategory, category.strCategoryDescription, category.strCategoryThumb)}}\r\n                        >\r\n                          Description\r\n                        </Button>\r\n                        <Button\r\n                          size=\"small\"\r\n                          color=\"primary\"\r\n                          variant=\"contained\"\r\n                          fullWidth\r\n                          onClick={() =>\r\n                            handleClickGoToCategoryMeals(category.strCategory, category.strCategoryDescription, category.strCategoryThumb)\r\n                          }\r\n                        >\r\n                          See meals\r\n                        </Button>\r\n                      </CardActions>\r\n                    </Card>\r\n                  </Grid>\r\n                );\r\n              })\r\n            )\r\n          )}\r\n        </Grid>\r\n\r\n        <Modal\r\n          className={classes.modal}\r\n          open={open}\r\n          onClose={handleModalClose}\r\n          aria-labelledby=\"simple-modal-title\"\r\n          aria-describedby=\"simple-modal-description\"\r\n        >\r\n          {modalContent}\r\n        </Modal>\r\n\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n",["84","85"],"C:\\DEV-VSCODE\\desafio-onesight\\src\\pages\\Login.js",["86"],"import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport api from \"../services/api.js\";\r\nimport { useHistory } from \"react-router\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport {apiLoginURL} from '../utils/Utils';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Box, Button, FormControl, Grid, IconButton, InputAdornment, InputLabel, OutlinedInput, Paper, Snackbar, Typography } from \"@material-ui/core\";\r\n\r\nimport loginImage from '../images/logo192.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  wrapper: {\r\n    position: 'relative',\r\n  },\r\n  buttonProgress: {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    marginTop: -12,\r\n    marginLeft: -12,\r\n  },\r\n  paperBGLogin: {\r\n    width: '100%',\r\n    maxWidth: '300px',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: '20px',\r\n  },\r\n  BgLogin: {\r\n    width: '100vw',\r\n    height: '100vh',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#f1f1f1',\r\n  },\r\n  txtAlignCenter: {\r\n    textAlign: 'center'\r\n  }\r\n}));\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function Login() {\r\n  const logged = useSelector((state) => state.login);\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [openAlertError, setOpenAlertError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [userLoginValues, setUserLoginValues] = useState({\r\n    email: 'fulano@gmail.com',\r\n    password: '123123123',\r\n    showPassword: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (logged) {\r\n      history.push(\"/categories\");\r\n    }\r\n    setOpenAlertError(false);\r\n    setLoading(false);\r\n    setErrorMessage('');\r\n  }, [userLoginValues.email, userLoginValues.password]);\r\n\r\n  async function handleFormSubmit(event) {\r\n    event.preventDefault();\r\n    setLoading(true);\r\n    const userLogged = await api\r\n      .post(`${apiLoginURL}`, {\r\n        email: userLoginValues.email,\r\n        password: userLoginValues.password,\r\n      })\r\n      .then((response) => {\r\n        return response.data;\r\n      })\r\n      .catch((error) => {\r\n        return false;\r\n      });\r\n\r\n    if (userLogged) {\r\n      // sessionStorage.setItem('user_token', userLogged);\r\n      // console.log(sessionStorage.getItem('user_token'));\r\n\r\n      dispatch({ type: \"USER_LOGIN\" });\r\n      history.push(\"/categories\");\r\n    } else {\r\n      setErrorMessage(\"Invalid e-mail or password\");\r\n      setOpenAlertError(true);\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  const handleCloseAlertError = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpenAlertError(false);\r\n  };\r\n\r\n  const handleInputsChanges = (prop) => (event) => {\r\n    setUserLoginValues({ ...userLoginValues, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setUserLoginValues({\r\n      ...userLoginValues,\r\n      showPassword: !userLoginValues.showPassword,\r\n    });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  function handleClickGoToCreateAccount(){\r\n    history.push(\"/register\");\r\n  }\r\n  \r\n  return (\r\n    <Box className={classes.BgLogin}>\r\n      <Paper className={classes.paperBGLogin}>\r\n\r\n        <img src={loginImage} alt=\"Meal\" className={{marginBottom: '20px'}} />\r\n\r\n        <form onSubmit={handleFormSubmit}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12} md={12}>\r\n              <Typography variant=\"h5\" className={classes.txtAlignCenter} gutterBottom>\r\n                Recipes Login\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12} sm={12} md={12}>\r\n              <FormControl fullWidth variant=\"outlined\">\r\n                <InputLabel htmlFor=\"outlined-adornment-email\">\r\n                  E-mail\r\n                </InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-email\"\r\n                  type=\"text\"\r\n                  value={userLoginValues.email}\r\n                  onChange={handleInputsChanges(\"email\")}\r\n                  labelWidth={45}\r\n                  required\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={12} md={12}>\r\n              <FormControl fullWidth variant=\"outlined\">\r\n                <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                  Password\r\n                </InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type={userLoginValues.showPassword ? \"text\" : \"password\"}\r\n                  value={userLoginValues.password}\r\n                  onChange={handleInputsChanges(\"password\")}\r\n                  labelWidth={70}\r\n                  required\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        onClick={handleClickShowPassword}\r\n                        onMouseDown={handleMouseDownPassword}\r\n                        edge=\"end\"\r\n                      >\r\n                        {userLoginValues.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={12} md={12}>\r\n              <div className={classes.wrapper}>\r\n                <Button\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  disabled={loading}\r\n                >\r\n                  Login\r\n                </Button>\r\n                {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Snackbar\r\n            open={openAlertError}\r\n            autoHideDuration={3000}\r\n            onClose={handleCloseAlertError}\r\n          >\r\n            <Alert onClose={handleCloseAlertError} severity=\"error\">\r\n              {errorMessage}\r\n            </Alert>\r\n          </Snackbar>\r\n        </form>\r\n        --\r\n        <Button\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          color=\"secondary\"\r\n          disableElevation\r\n          onClick={handleClickGoToCreateAccount}\r\n        >\r\n          Create Account\r\n        </Button>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n}","C:\\DEV-VSCODE\\desafio-onesight\\src\\pages\\MealsList.js",["87","88","89","90","91","92","93","94","95"],"import Header from \"../components/Header\";\r\nimport { useHistory, useLocation, useRouteMatch } from \"react-router-dom\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport api from \"../services/api\";\r\nimport {urlTheMealDB} from \"../utils/Utils\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport { Button, Card, CardActionArea, CardActions, CardContent, CardMedia, Container, Grid, makeStyles, Paper, TableContainer, Typography } from \"@material-ui/core\";\r\n\r\nimport { useTable } from \"react-table\";\r\nimport { TABLE_MEALS_LIST_COLUMNS } from \"../utils/tablesColumns\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport MaUTable from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\n\r\nimport '../styles/tablesStyles.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // maxWidth: 345,\r\n    // marginBottom: 20\r\n  },\r\n  cardFlex: {\r\n    display: \"flex\",\r\n    marginBottom: \"20px\",\r\n  },\r\n  media: {\r\n    height: 300,\r\n  },\r\n  categoryImage: {\r\n    width: \"50%\",\r\n    minWidth: '100px',\r\n    backgroundSize: \"cover\",\r\n  },\r\n  paper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    padding: \"10px 0px 0px 0px\",\r\n    marginBottom: \"20px\",\r\n  },\r\n  preloader: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    width: '100%',\r\n  },\r\n  details: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  content: {\r\n    flex: \"1 0 auto\",\r\n  },\r\n  controls: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    paddingLeft: theme.spacing(1),\r\n    paddingBottom: theme.spacing(1),\r\n  },\r\n  tableCategoryImage: {\r\n    borderRadius: '7px',\r\n  }\r\n}));\r\n\r\nexport default function MealsList() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const match = useRouteMatch();\r\n  const location = useLocation();\r\n\r\n  const tableMode = useSelector((state) => {\r\n    return state.table_mode;\r\n  });\r\n  \r\n  const [allMealsByCategory, setAllMealsByCategory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const idCategory = match.params.id;\r\n\r\n    const getAllMealsByCategory = async () => {\r\n      const data = await api.get(`${urlTheMealDB}/filter.php?c=${idCategory}`)\r\n        .then((response) => {\r\n          return response.data;\r\n        });\r\n      console.log(data);\r\n      \r\n      const newData = data.meals.map(meal => {\r\n        return {...meal, 'mealLink': `${meal.idMeal}`};\r\n      })\r\n      setAllMealsByCategory(newData);\r\n\r\n      // setAllMealsByCategory(data);\r\n    };\r\n\r\n    getAllMealsByCategory();\r\n  }, []);\r\n\r\n  function handleClickGoToMealsCategoryList(idCategory) {\r\n    history.push(`/details/${idCategory}`);\r\n  }\r\n\r\n  function handleGoBackButtonClick() {\r\n    history.goBack();\r\n  }\r\n\r\n  function Table() {\r\n    const columns = useMemo(() => TABLE_MEALS_LIST_COLUMNS, []);\r\n    const data = useMemo(() => allMealsByCategory, []);\r\n\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      rows,\r\n      prepareRow,\r\n    } = useTable({\r\n      columns,\r\n      data,\r\n    });\r\n\r\n    return (\r\n      <div>\r\n\r\n        \r\n        <table className=\"table\" {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody>\r\n          {\r\n              rows.map(row => {\r\n                prepareRow(row);\r\n                return (\r\n                  <tr {...row.getRowProps()} >\r\n                    {\r\n                      row.cells.map((cell, index) => {\r\n                        if (index === 0) {\r\n                          return (\r\n                            <td key={index} data-label=\"Image\">\r\n                              <img src={cell.row.cells[index].value} alt=\"Category\" width=\"100px\" className={classes.tableCategoryImage} />\r\n                            </td>\r\n                          )\r\n                        }else if(index === 2) {\r\n                          return (\r\n                            <td key={index} data-label=\"Link\">\r\n                                <Button \r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => handleClickGoToMealsCategoryList(cell.row.cells[index].value)\r\n                                }>See this recipe</Button>\r\n                            </td>\r\n                          )\r\n                        } else {\r\n                          return (\r\n                            <td key={index} data-label=\"Name\">\r\n                              <Typography gutterBottom variant=\"h5\" component=\"h5\" className=\"alignLeftDeskTop\">\r\n                                {cell.row.cells[index].value}\r\n                              </Typography>\r\n                            </td>);\r\n                        }\r\n                      })\r\n                    }\r\n                  </tr>\r\n                )\r\n              })\r\n            }\r\n          </tbody>\r\n        </table>\r\n\r\n        {/* <TableContainer component={Paper}>\r\n          <MaUTable {...getTableProps()}>\r\n            <TableHead>\r\n              {headerGroups.map(headerGroup => (\r\n                <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n                  {headerGroup.headers.map(column => (\r\n                    <TableCell {...column.getHeaderProps()}>{column.render('Header')}</TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n            </TableHead>\r\n            <TableBody {...getTableBodyProps()}>\r\n              {\r\n                rows.map(row => {\r\n                  prepareRow(row);\r\n                  return (\r\n                    <TableRow {...row.getRowProps()} >\r\n                      {\r\n                        row.cells.map((cell, index) => {\r\n                          if (index === 0) {\r\n                            return (\r\n                              <TableCell key={index}>\r\n                                <img src={cell.row.cells[index].value} alt=\"Category\" width=\"100px\" className={classes.tableCategoryImage} />\r\n                              </TableCell>\r\n                            )\r\n                          }else if(index === 2) {\r\n                            return (\r\n                              <TableCell key={index}>\r\n                                  <Button \r\n                                  fullWidth\r\n                                  variant=\"contained\"\r\n                                  color=\"primary\"\r\n                                  onClick={() => handleClickGoToMealsCategoryList(cell.row.cells[index].value)\r\n                                  }>See this recipe</Button>\r\n                              </TableCell>\r\n                            )\r\n                          } else {\r\n                            return (\r\n                              <TableCell key={index}>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                                  {cell.row.cells[index].value}\r\n                                </Typography>\r\n                              </TableCell>);\r\n                          }\r\n                        })\r\n                      }\r\n                    </TableRow>\r\n                  )\r\n                })\r\n              }\r\n            </TableBody>\r\n          </MaUTable>\r\n        </TableContainer> */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header></Header>\r\n      <Container maxWidth=\"lg\">\r\n        <Card className={classes.cardFlex}>\r\n          <CardMedia\r\n            xs={12} sm={6} md={4}\r\n            className={classes.categoryImage}\r\n            image={location.state.thumb}\r\n            title={`${match.params.id} category image`}\r\n          />\r\n          <div className={classes.details}>\r\n            <CardContent className={classes.content}>\r\n              <Typography gutterBottom variant=\"h4\" component=\"h4\">\r\n                Category {match.params.id}\r\n              </Typography>\r\n              {/* <Typography gutterBottom variant=\"body1\" component=\"p\">\r\n                {location.state.description}\r\n              </Typography> */}\r\n            </CardContent>\r\n            <CardActions>\r\n              <Button color=\"primary\" onClick={handleGoBackButtonClick}>\r\n                See all categories\r\n              </Button>\r\n            </CardActions>\r\n          </div>\r\n        </Card>\r\n\r\n        <Grid container spacing={3}>\r\n          {allMealsByCategory.length === 0 \r\n          ? (\r\n            <div className={classes.preloader}>\r\n              <Card style={{width: '100%'}}>\r\n                <CardContent>\r\n                  <Skeleton animation=\"wave\" variant=\"rect\" width='100%' height={200} />\r\n                  <Skeleton animation=\"wave\" variant=\"text\" height={40} />\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          ) \r\n          : tableMode ? \r\n            <Grid item xs={12} sm={12} md={12} lg={12}>\r\n              <Table />\r\n            </Grid>\r\n            : (\r\n            allMealsByCategory.map((meal) => {\r\n              return (\r\n                <Grid item xs={12} sm={6} md={4} lg={3} key={meal.idMeal}>\r\n                  <Card>\r\n                    <CardActionArea\r\n                      onClick={() =>\r\n                        handleClickGoToMealsCategoryList(meal.idMeal)\r\n                      }\r\n                    >\r\n                      <CardMedia\r\n                        className={classes.media}\r\n                        image={meal.strMealThumb}\r\n                        title={`${meal.strMeal} category image`}\r\n                      />\r\n                      <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                          {meal.strMeal}\r\n                        </Typography>\r\n                      </CardContent>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n                      <Button\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        onClick={() =>\r\n                          handleClickGoToMealsCategoryList(meal.idMeal)\r\n                        }\r\n                      >\r\n                        See recipe\r\n                      </Button>\r\n                    </CardActions>\r\n                  </Card>\r\n                </Grid>\r\n              );\r\n            })\r\n          )}\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","C:\\DEV-VSCODE\\desafio-onesight\\src\\pages\\MealDetails.js",["96","97","98"],"C:\\DEV-VSCODE\\desafio-onesight\\src\\errors\\Error404.js",[],"C:\\DEV-VSCODE\\desafio-onesight\\src\\components\\Header.js",[],"C:\\DEV-VSCODE\\desafio-onesight\\src\\App.js",[],"C:\\DEV-VSCODE\\desafio-onesight\\src\\services\\api.js",[],"C:\\DEV-VSCODE\\desafio-onesight\\src\\utils\\tablesColumns.js",[],"C:\\DEV-VSCODE\\desafio-onesight\\src\\index.js",[],"C:\\DEV-VSCODE\\desafio-onesight\\src\\reducers\\tableModeReducer.js",[],"C:\\DEV-VSCODE\\desafio-onesight\\src\\reducers\\loginReducer.js",[],"C:\\DEV-VSCODE\\desafio-onesight\\src\\pages\\CreateAccount.js",["99"],"C:\\DEV-VSCODE\\desafio-onesight\\src\\components\\PrivateRoute.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":9,"column":36,"nodeType":"106","messageId":"107","endLine":9,"endColumn":41},{"ruleId":"104","severity":1,"message":"108","line":9,"column":43,"nodeType":"106","messageId":"107","endLine":9,"endColumn":57},{"ruleId":"104","severity":1,"message":"109","line":17,"column":8,"nodeType":"106","messageId":"107","endLine":17,"endColumn":16},{"ruleId":"104","severity":1,"message":"110","line":18,"column":8,"nodeType":"106","messageId":"107","endLine":18,"endColumn":17},{"ruleId":"104","severity":1,"message":"111","line":19,"column":8,"nodeType":"106","messageId":"107","endLine":19,"endColumn":17},{"ruleId":"104","severity":1,"message":"112","line":20,"column":8,"nodeType":"106","messageId":"107","endLine":20,"endColumn":17},{"ruleId":"104","severity":1,"message":"113","line":21,"column":8,"nodeType":"106","messageId":"107","endLine":21,"endColumn":16},{"ruleId":"104","severity":1,"message":"114","line":22,"column":8,"nodeType":"106","messageId":"107","endLine":22,"endColumn":19},{"ruleId":"115","severity":1,"message":"116","line":124,"column":6,"nodeType":"117","endLine":124,"endColumn":8,"suggestions":"118"},{"ruleId":"104","severity":1,"message":"119","line":150,"column":7,"nodeType":"106","messageId":"107","endLine":150,"endColumn":24},{"ruleId":"120","severity":1,"message":"121","line":178,"column":49,"nodeType":"122","messageId":"123","endLine":178,"endColumn":51},{"ruleId":"100","replacedBy":"124"},{"ruleId":"102","replacedBy":"125"},{"ruleId":"115","severity":1,"message":"126","line":73,"column":6,"nodeType":"117","endLine":73,"endColumn":55,"suggestions":"127"},{"ruleId":"104","severity":1,"message":"105","line":7,"column":106,"nodeType":"106","messageId":"107","endLine":7,"endColumn":111},{"ruleId":"104","severity":1,"message":"108","line":7,"column":113,"nodeType":"106","messageId":"107","endLine":7,"endColumn":127},{"ruleId":"104","severity":1,"message":"109","line":13,"column":8,"nodeType":"106","messageId":"107","endLine":13,"endColumn":16},{"ruleId":"104","severity":1,"message":"110","line":14,"column":8,"nodeType":"106","messageId":"107","endLine":14,"endColumn":17},{"ruleId":"104","severity":1,"message":"111","line":15,"column":8,"nodeType":"106","messageId":"107","endLine":15,"endColumn":17},{"ruleId":"104","severity":1,"message":"112","line":16,"column":8,"nodeType":"106","messageId":"107","endLine":16,"endColumn":17},{"ruleId":"104","severity":1,"message":"113","line":17,"column":8,"nodeType":"106","messageId":"107","endLine":17,"endColumn":16},{"ruleId":"115","severity":1,"message":"128","line":100,"column":6,"nodeType":"117","endLine":100,"endColumn":8,"suggestions":"129"},{"ruleId":"104","severity":1,"message":"119","line":116,"column":7,"nodeType":"106","messageId":"107","endLine":116,"endColumn":24},{"ruleId":"104","severity":1,"message":"130","line":125,"column":26,"nodeType":"106","messageId":"107","endLine":125,"endColumn":43},{"ruleId":"120","severity":1,"message":"131","line":137,"column":29,"nodeType":"122","messageId":"132","endLine":137,"endColumn":31},{"ruleId":"115","severity":1,"message":"133","line":150,"column":6,"nodeType":"117","endLine":150,"endColumn":8,"suggestions":"134"},{"ruleId":"115","severity":1,"message":"126","line":65,"column":6,"nodeType":"117","endLine":65,"endColumn":8,"suggestions":"135"},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"no-unused-vars","'Paper' is defined but never used.","Identifier","unusedVar","'TableContainer' is defined but never used.","'MaUTable' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'transitions' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'allMealsCategories'. Either include it or remove the dependency array.","ArrayExpression",["138"],"'getTableBodyProps' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["136"],["137"],"React Hook useEffect has missing dependencies: 'history' and 'logged'. Either include them or remove the dependency array.",["139"],"React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.",["140"],"'setAllIngredients' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has missing dependencies: 'allIngredients' and 'match.params.id'. Either include them or remove the dependency array.",["141"],["142"],"no-global-assign","no-unsafe-negation",{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},"Update the dependencies array to be: [allMealsCategories]",{"range":"153","text":"154"},"Update the dependencies array to be: [history, logged, userLoginValues.email, userLoginValues.password]",{"range":"155","text":"156"},"Update the dependencies array to be: [match.params.id]",{"range":"157","text":"158"},"Update the dependencies array to be: [allIngredients, match.params.id]",{"range":"159","text":"160"},"Update the dependencies array to be: [history, logged]",{"range":"161","text":"162"},[3565,3567],"[allMealsCategories]",[2116,2165],"[history, logged, userLoginValues.email, userLoginValues.password]",[2723,2725],"[match.params.id]",[3398,3400],"[allIngredients, match.params.id]",[1887,1889],"[history, logged]"]